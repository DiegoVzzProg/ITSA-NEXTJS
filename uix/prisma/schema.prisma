generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cache {
  key        String @id @db.VarChar(255)
  value      String @db.MediumText
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model countries {
  id        String      @id @db.Char(36)
  name      String      @db.VarChar(255)
  tax       Decimal?    @db.Decimal(8, 2)
  customers customers[]
}

model customer_cart {
  id          String    @id @db.Char(36)
  user_id     String    @db.Char(36)
  product_id  String    @db.Char(36)
  description String    @db.VarChar(255)
  picture     String?   @db.VarChar(255)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  products    products  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "customer_cart_product_id_foreign")
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "customer_cart_user_id_foreign")

  @@index([product_id], map: "customer_cart_product_id_foreign")
  @@index([user_id], map: "customer_cart_user_id_foreign")
}

model customer_purchased_products {
  id         String                             @id @db.Char(36)
  client_id  String                             @db.Char(36)
  product_id String                             @db.Char(36)
  status     customer_purchased_products_status @default(pending)
  created_at DateTime?                          @db.Timestamp(0)
  updated_at DateTime?                          @db.Timestamp(0)
  customers  customers                          @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "customer_purchased_products_client_id_foreign")
  products   products                           @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "customer_purchased_products_product_id_foreign")

  @@index([client_id], map: "customer_purchased_products_client_id_foreign")
  @@index([product_id], map: "customer_purchased_products_product_id_foreign")
}

model customers {
  id                          String                        @id @db.Char(36)
  user_id                     String                        @unique(map: "customers_user_id_unique") @db.Char(36)
  name                        String                        @db.VarChar(255)
  address                     String                        @db.VarChar(255)
  state                       String                        @db.VarChar(255)
  countrie_id                 String                        @db.Char(36)
  postal_code                 String                        @db.VarChar(255)
  phone_number                String                        @db.VarChar(255)
  created_at                  DateTime?                     @db.Timestamp(0)
  updated_at                  DateTime?                     @db.Timestamp(0)
  customer_purchased_products customer_purchased_products[]
  countries                   countries                     @relation(fields: [countrie_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "customers_countrie_id_foreign")
  users                       users                         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "customers_user_id_foreign")

  @@index([countrie_id], map: "customers_countrie_id_foreign")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String  @db.LongText
  options        String? @db.MediumText
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   String    @db.Char(36)
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model products {
  id                          String                        @id @db.Char(36)
  route                       String?                       @db.VarChar(255)
  name                        String                        @db.VarChar(255)
  description                 String                        @db.VarChar(255)
  subdescription              String                        @db.VarChar(255)
  price                       Decimal                       @default(0.00) @db.Decimal(10, 2)
  picture                     String?                       @db.VarChar(255)
  icon_picture                String?                       @db.VarChar(255)
  color_effect                String                        @db.VarChar(255)
  folder                      String                        @db.VarChar(255)
  file_name                   String                        @db.VarChar(255)
  card_information            Json
  created_at                  DateTime                      @db.Timestamp(0)
  customer_cart               customer_cart[]
  customer_purchased_products customer_purchased_products[]
}

model route_keys_outside {
  id         String   @id @db.Char(36)
  used       Boolean  @default(false)
  created_at DateTime @db.Timestamp(0)
  expires_at DateTime @db.Timestamp(0)
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       String? @db.Char(36)
  ip_address    String? @db.VarChar(45)
  user_agent    String? @db.Text
  payload       String  @db.LongText
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model user_token_refresh {
  id         String   @id @db.Char(36)
  user_id    String   @db.Char(36)
  token      String   @unique(map: "user_token_refresh_token_unique") @db.VarChar(255)
  expires_at DateTime @db.Timestamp(0)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_token_refresh_user_id_foreign")

  @@index([user_id], map: "user_token_refresh_user_id_foreign")
}

model users {
  id                 String               @id @db.Char(36)
  user_name          String               @db.VarChar(255)
  email              String               @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at  DateTime?            @db.Timestamp(0)
  password           String               @db.VarChar(255)
  last_connection    DateTime?            @db.DateTime(0)
  terms              Boolean
  remember_token     String?              @db.VarChar(100)
  created_at         DateTime?            @db.Timestamp(0)
  updated_at         DateTime?            @db.Timestamp(0)
  customer_cart      customer_cart[]
  customers          customers?
  user_token_refresh user_token_refresh[]
}

enum customer_purchased_products_status {
  pending
  paid
  failed
  free
}
